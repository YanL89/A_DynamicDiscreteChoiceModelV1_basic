results
From = 1948
To = 1954
inverse_power = 1
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11):(12*(To-1947))], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = 1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
From = 1948
To = 1951
inverse_power = 1
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11):(12*(To-1947))], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = 1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
plot(UER[(12*(From-1947)-11):(12*(To-1947))], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
From = 1951
To = 1954
inverse_power = 1
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11):(12*(To-1947))], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = 1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
From = 1954
To = 1957
inverse_power = 1
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11):(12*(To-1947))], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = 1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
From = 1954
To = 1959
inverse_power = 1
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11):(12*(To-1947))], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = 1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
From = 1948
To = 1959
inverse_power = 1
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11):(12*(To-1947))], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = 1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
plot(year, IR, main="Scatterplot Example",
xlab="YEAR ", ylab="Inflation Rate", pch=19, type = 'l', xlim=c(1948, 2017), ylim=c(-3, 18))
lines(year, UER, main="Scatterplot Example",
xlab="YEAR ", ylab="Unemployment Rate", pch=19, type = 'l', col = "red")
legend("topright", legend=c("Unemployment rate", "Inflation rate"),
col=c("red", "black"), lty=1:1, cex=0.8)
From = 1994
To = 2000
inverse_power = 1
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11):(12*(To-1947))], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = 1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
plot(year, IR, main="Scatterplot Example",
xlab="YEAR ", ylab="Inflation Rate", pch=19, type = 'l', xlim=c(1948, 2017), ylim=c(-3, 18))
lines(year, UER, main="Scatterplot Example",
xlab="YEAR ", ylab="Unemployment Rate", pch=19, type = 'l', col = "red")
legend("topright", legend=c("Unemployment rate", "Inflation rate"),
col=c("red", "black"), lty=1:1, cex=0.8)
From = 1970
To = 1980
inverse_power = 1
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11):(12*(To-1947))], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
plot(year, IR, main="Scatterplot Example",
xlab="YEAR ", ylab="Inflation Rate", pch=19, type = 'l', xlim=c(1948, 2017), ylim=c(-3, 18))
lines(year, UER, main="Scatterplot Example",
xlab="YEAR ", ylab="Unemployment Rate", pch=19, type = 'l', col = "red")
legend("topright", legend=c("Unemployment rate", "Inflation rate"),
col=c("red", "black"), lty=1:1, cex=0.8)
From = 1970
To = 1980
lag = 10
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
From = 1970
To = 1980
lag = 10
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
#plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
#     xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
From = 1970
To = 1980
lag = 6
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
#plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
#     xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
From = 1970
To = 1980
lag = 12
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
#plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
#     xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
From = 1970
To = 1980
lag = 18
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
#plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
#     xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
From = 1970
To = 1980
lag = 24
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
#plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
#     xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
From = 1970
To = 1975
lag = 18
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
#plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
#     xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
From = 1970
To = 1975
lag = 12
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
#plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
#     xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
From = 1970
To = 1985
lag = 12
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
#plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
#     xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
From = 1970
To = 1985
lag = 18
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
#plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
#     xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
From = 1970
To = 1985
lag = 15
#inverse correlation before 1970: Phillips' cursive
plot(UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)], IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
#plot(1/UER[(12*(From-1947)-11):(12*(To-1947))]^inverse_power, IR[(12*(From-1947)-11):(12*(To-1947))], main="Scatterplot Example",
#     xlab="Unemployment Rate", ylab="Inflation Rate", pch=19, type = 'p')
data_1 = data.frame(Y = IR[(12*(From-1947)-11):(12*(To-1947))], X = UER[(12*(From-1947)-11+lag):(12*(To-1947)+lag)]^inverse_power)
reg = lm(Y ~ X, data_1)
abline(reg)
results = summary(reg)
results
rm(list=ls())
#-----------------------set work directory------------------------
setwd("C:/Users/Kelvin/Documents/Yan/Dynamic Modeling/20160109/dynamic discrete choice model_1")
#-----------------------load source files-------------------------
source("models.R")
source("dyn.R")
source("dynData.R")
source("dynUtils.R")
source("args.R")
source("misc.R")
source("create_X.R")
source("LL.R")
source("SD.R")
source("deriv.R")
source("logit.R")
source("dyn2logitV2.R")
#--------------------define model specification---------------------
spec = list(
#load data
D = "data_files/dyn",
Time = "data_files/time.txt",
Global = "data_files/global.txt",
First = "data_files/first.txt",
choices = "data_files/choice15.txt",
# define independent attributes
payoff_alt = c(),
payoff_time = c("Vehicles"),
payoff_global = c("Workers"),
generic = list(),
specific = list(c("VehPrice.1", "GasPrice.1"), c("ASC", "VehPrice.2"), c("ASC", "VehPrice.3", "range.3", "ElePrice.3")), # put variables here in one vector per alternative
#restructure data
modifyD = function(D,Time,Global,Z,t){
allTime = Time_select_vars(Time, NULL, t, all = TRUE)
Dyan = cbind(D[[t]], Global, allTime)
return(Dyan)
},
#set basic parameters
SD = "hessian",
ASC = FALSE,
nTime = 15,  #actual time periods = total time T - look ahead time period L
nLook = 3,  #look ahead time period L
stopAlt = c(1,2,3), # HERE, if you have more than one alternative
# that halts the decision process, put them in a vector
# like stopAlt = c(1,2,10) if alt 1, 2 and 10 are stopping alternatives
outTime = 5 #time periods that halts the decision process
#i.e., outTime = 0 means never be out-of-market
#outTime >= nTime means once be out-of-market the decision maker will never return
)
#---------------------check model specification------------------------
spec = checkFillDynSpec(spec)
#--------------------------model estimation----------------------------
modelFns = dyn
D = NULL
Sys.time()
Mdyn = model(modelFns, spec, D)
Sys.time()
Mdyn
ApplyMdyn = dynApply(Mdyn, spec)
ApplyMdyn = round(100*ApplyMdyn) / 100
ApplyMdyn
spec = checkFillDynSpec(spec)
Args = dyn$computeArgs(spec,NULL)
zero = rep(0, length(dyn$computeStart(spec,NULL)))
cat("LL at 0: " ,sum(log(dyn$LLVec(zero,Args))),"\n")
logitSpecData = dyn2logitV2(spec)
specL = logitSpecData$specLogit
DL = logitSpecData$D
MLogit = model(logit, specL, DL)
MLogit
D$const = 1
# complete specification
spec = addVal(spec,"delta", 0.0001)
spec = addVal(spec,"reltol", 0.0001)
spec = addVal(spec,"abstol",0.0001)
spec = addVal(spec,"verbose",TRUE)
spec = addVal(spec,"SD","hessian")
start = getStart(modelFns, spec, D)
args = modelFns$computeArgs(spec, D)
Xsim = modelFns$computeSimData(args, D)
args = c(args, spec, Xsim)
misc = modelFns$computeMisc(spec, D)
big_num = 9999999
lb = getLb(misc, start)
ub = getUb(misc, start)
f = modelFns$LLVec
delta = rep(spec$delta, length(start))
b =start
n = length(args$Y)
nalt = max(args$Y) - min(args$Y) + 1
n = length(args$C)
nalt = max(args$C) - min(args$C) + 1
expU = exp(args$X %*% b)
b
n = length(args$spec$Y)
nalt = max(args$spec$Y) - min(args$spec$Y) + 1
n = length(args$spec$C)
nalt = max(args$spec$C) - min(args$spec$C) + 1
expU = exp(args$spec$X %*% b)
logitSpecData = dyn2logitV2(spec)
specL = logitSpecData$specLogit
DL = logitSpecData$D
View(DL)
D$const = 1
# complete specification
spec = addVal(spec,"delta", 0.0001)
spec = addVal(spec,"reltol", 0.0001)
spec = addVal(spec,"abstol",0.0001)
spec = addVal(spec,"verbose",TRUE)
spec = addVal(spec,"SD","hessian")
start = getStart(modelFns, spec, D)
start
X = create_X(spec$generic, spec$specific, D, spec$ASC)
D=DL
X = create_X(spec$generic, spec$specific, D, spec$ASC)
View(X)
Y = D[[spec$Y]]
Y = D[[spec$C]]
spec$Y
rm(list=ls())
#-----------------------set work directory------------------------
setwd("C:/Users/Kelvin/Documents/Yan/Dynamic Modeling/20160109/dynamic discrete choice model_1")
#-----------------------load source files-------------------------
source("models.R")
source("dyn.R")
source("dynData.R")
source("dynUtils.R")
source("args.R")
source("misc.R")
source("create_X.R")
source("LL.R")
source("SD.R")
source("deriv.R")
source("logit.R")
source("dyn2logitV2.R")
#--------------------define model specification---------------------
spec = list(
#load data
D = "data_files/dyn",
Time = "data_files/time.txt",
Global = "data_files/global.txt",
First = "data_files/first.txt",
choices = "data_files/choice15.txt",
# define independent attributes
payoff_alt = c(),
payoff_time = c("Vehicles"),
payoff_global = c("Workers"),
generic = list(),
specific = list(c("VehPrice.1", "GasPrice.1"), c("ASC", "VehPrice.2"), c("ASC", "VehPrice.3", "range.3", "ElePrice.3")), # put variables here in one vector per alternative
#restructure data
modifyD = function(D,Time,Global,Z,t){
allTime = Time_select_vars(Time, NULL, t, all = TRUE)
Dyan = cbind(D[[t]], Global, allTime)
return(Dyan)
},
#set basic parameters
SD = "hessian",
ASC = FALSE,
nTime = 15,  #actual time periods = total time T - look ahead time period L
nLook = 3,  #look ahead time period L
stopAlt = c(1,2,3), # HERE, if you have more than one alternative
# that halts the decision process, put them in a vector
# like stopAlt = c(1,2,10) if alt 1, 2 and 10 are stopping alternatives
outTime = 5 #time periods that halts the decision process
#i.e., outTime = 0 means never be out-of-market
#outTime >= nTime means once be out-of-market the decision maker will never return
)
#---------------------check model specification------------------------
spec = checkFillDynSpec(spec)
#--------------------------model estimation----------------------------
modelFns = dyn
D = NULL
Sys.time()
Mdyn = model(modelFns, spec, D)
Sys.time()
Mdyn
ApplyMdyn = dynApply(Mdyn, spec)
M = ApplyMdyn
args = dyn$computeArgs(spec,NULL)
b = M$results$beta_hat
predCount = matrix(0, spec$nTime, spec$nAlt+1)
M = Mdyn
args = dyn$computeArgs(spec,NULL)
b = M$results$beta_hat
predCount = matrix(0, spec$nTime, spec$nAlt+1)
nparH = ncol(args$M[[1]][[1]])
alpha = b[1:nparH]
beta = b[(nparH+1):length(b)]
alpha
beta
H = list()
U = list()
V = list()
for(t in 1:args$spec$nTime){
for(l in 1:(args$spec$nLook+1)){
H[[l]] = as.matrix(args$M[[t]][[l]]) %*% alpha
if(0 == ncol(H[[l]]))
H[[l]] = rep(0, args$spec$nObs)
U[[l]] = matrix(args$X[[t]][[l]] %*% beta, args$spec$nObs, args$spec$nAlt, byrow = T)
V[[l]] = UtoV(U[[l]])
}
W = getW(H,V)
R = getR(U[[1]])
for(choice in 0:spec$nAlt){
P = getDynProbas(W,R,U[[1]],rep(choice,spec$nObs))
P = minVec(P,1 - args$stop[,t])
predCount[t,choice+1] = sum(P)
}
}
predCount
nobs = args$spec$nObs
nobs
count = matrix(0, spec$nTime, spec$nAlt + 1)
for(t in 1:spec$nTime)
for(a in 0:spec$nAlt)
count[t,a+1] = sum(spec$C[,t] == a)
count
spec$nAlt
spec = checkFillDynSpec(spec)
Args = dyn$computeArgs(spec,NULL)
zero = rep(0, length(dyn$computeStart(spec,NULL)))
cat("LL at 0: " ,sum(log(dyn$LLVec(zero,Args))),"\n")
logitSpecData = dyn2logitV2(spec)
View（logitSpecData）
View(logitSpecData)
generic = dynSpec$generic
specific = dynSpec$specific
#prepend a "zero" because the "keep" option is a full fledged alternative now
if(0 != length(generic))
for(i in 1:length(generic))
generic[[i]] = c("zero",generic[[i]])
keepvars = c(dynSpec$payoff_alt, dynSpec$payoff_time, dynSpec$payoff_global)
specific = c(list(keepvars), specific)
dynSpec = checkFillDynSpec(dynSpec)
D = dyn2logitV2data(dynSpec)
dynSpec = spec
generic = dynSpec$generic
specific = dynSpec$specific
#prepend a "zero" because the "keep" option is a full fledged alternative now
if(0 != length(generic))
for(i in 1:length(generic))
generic[[i]] = c("zero",generic[[i]])
keepvars = c(dynSpec$payoff_alt, dynSpec$payoff_time, dynSpec$payoff_global)
specific = c(list(keepvars), specific)
dynSpec = checkFillDynSpec(dynSpec)
D = dyn2logitV2data(dynSpec)
View(D)
logitSpecData = dyn2logitV2(spec)
logitSpecData$specLogit
specL = logitSpecData$specLogit
DL = logitSpecData$D
MLogit = model(logit, specL, DL)
source("models.R")
logitSpecData = dyn2logitV2(spec)
specL = logitSpecData$specLogit
DL = logitSpecData$D
MLogit = model_logit(logit, specL, DL)
MLogit
Mdyn
